import numpy as np
import torch
import torch.nn as  nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_classification
import tensorflow as tf
from tensorflow import keras
from tenserflow.keras import layers

# 1. Data preparation with sklearn
data, labels =make_classification(n_samples=1000, n_features=20, random_state=42)
scalar=StandardScaler()
data=scalar.fit_transform(data)
x_train, x_test, y_train, y_test=train_test_split(data,labels, test_size=0.2, random_state=42)

# 2. Neural network with TransorFlow
tf_model=keras.Sequential([
    layers.Dense(16, activation='relu',input_shape=(20,)),
    layers.Dense(8, activation='relu'),
    layers.Dense(1,activation='sigmoid')
])
tf_model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])
tf_model.fit(x_train, y_train, epochs=10, batch_size=16, validation_data=(x_test, y_test))

# 3. Neural network with PyTorch
class SimpleNNnn(nn.Module):
    def __init__(self):
        super(SimpleNNnn, self).__init__()
        self.fc1=nn.Linear(20, 16)
        self.fc2=nn.Linear(16, 8)
        self.fc3=nn.Linear(8, 1)
        self.sigmoid=nn.Sigmoid()
        
    def forward(self, x):
        x=torch.relu(self.fc1(x))
        x=torch.relu(self.fc2(x))
        x=self.sigmoid(self.fc3(x))
        return x

pytorch_model=SimpleNNnn()
criterion=nn.BCELoss()
optimizer=optim.Adam(pytorch_model.parameters(), lr=0.01)

x_train_torch=torch.tensor(x_train, dtype=torch.float32)
y_train_torch=torch.tensor(y_train, dtype=torch.float32).view(-1,1)

for epoch in range(10):
    optimizer.zero_grad()
    outputs=pytorch_model(x_train_torch)
    loss=criterion(outputs,y_train_torch)
    loss.backward()
    optimizer.step()
    print(f'Epoch {epoch+1}, Loss: {loss.item()}')
