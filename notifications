from abc import ABC, abstractmethod
from collection import defaultdict

class NotificationManager:
    _instance=None
    
    def __new__(cls) :
        if cls._instance=super(NotificationManager, cls).__new__(cls):
            cls._instance._subscribers=defaultdict(list)
            cls._instance._notifications=[]
            cls._instance._notification_count=defaultdict(int)
        return cls._instance
    
    def subscribe(self,group, subscriber):
        self._subscribers[group].append(subscriber)
        
    def unsubscribe(self,group, subscriber):
        self._subscribers[group].remove(subscriber)
        
    def notify(self,group, notification):
        for subscriber in self._subscribers[group]:
            subscriber.update(notification)
            self._notifications.append(notification)
            self._notification.count[type(notification).__name__]+=1
            
    def add_notification(self, group, notification):
        self.notify(group, notification)
        
    def notification_history(self):
        return [n.content for n in self._notifications]
    
    def notification_summary(self):
        return dict(self._notification_count)
    
class NotificationFactory:
    @staticmethod
    def create_notification(notification_type,content):
        if notification_type=='SMS':
            return SMSNotification(content)
        elif notification_type=='Email':
            return EmailNotification(content)
        elif notification_type=='Push':
            return PushNotification(content)
        elif notification_type=='Slack':
            return SlackNotification(content)
        elif notification_type=='Telegram':
            return TelegramNotification(content)
        else:
            raise ValueError(f'Unknown notification type {notification_type}')
        
class Notification(ABC):
    def __init__(self, content):
        self.content=content
    
    @abstractmethod
    def send(self):
        pass

class SMSNotification(Notification):
    def send(self):
        print(f'Sending SMS {self.content}')
        
class EmailNotification(Notification):
    def send(self):
        print(f'Sending Email {self.content}')
        
class PushNotification(Notification):
    def send(self):
        print(f'Sending Push Notification {self.content}')
  
class SlackNotification(Notification):
    def send(self):
        print(f'Sending Slack Message {self.content}')   
        
class TelegramNotification(Notification):
    def send(self):
        print(f'Sending Telegram Message {self.content}')
        
class User(self):
    def __init__(self, name):
        self.name=name
        
    def update(self, notification):
        print(f'{self.name} received notification {notification.content}')

if __name__ == "__main__":
    # Singleton Instance
    manager = NotificationManager()

    # Users (Observers)
    alice = User("Alice")
    bob = User("Bob")
    charlie = User("Charlie")

    # Subscribe users to groups
    manager.subscribe("Promotions", alice)
    manager.subscribe("Promotions", bob)
    manager.subscribe("Updates", charlie)
    manager.subscribe("Updates", alice)

    # Create notifications using the Factory
    factory = NotificationFactory()
    sms = factory.create_notification("SMS", "Your order is on the way!")
    email = factory.create_notification("Email", "Thank you for signing up!")
    push = factory.create_notification("Push", "You have a new message!")
    slack = factory.create_notification("Slack", "Team meeting at 3 PM!")
    telegram = factory.create_notification("Telegram", "Reminder: Submit your report!")

    # Add notifications to different groups
    manager.add_notification("Promotions", sms)
    manager.add_notification("Promotions", email)
    manager.add_notification("Updates", push)
    manager.add_notification("Updates", slack)
    manager.add_notification("Promotions", telegram)

    # Unsubscribe a user and send another notification
    manager.unsubscribe("Promotions", bob)
    new_email = factory.create_notification("Email", "Exclusive offer just for you!")
    manager.add_notification("Promotions", new_email)

    # Show notification history and summary
    print("\nNotification History:")
    print(manager.notification_history())

    print("\nNotification Summary:")
    print(manager.notification_summary())


        
            
            
        
        
    
            
            
    
    
            
